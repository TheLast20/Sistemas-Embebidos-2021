// Generated by Proteus Visual Designer for Arduino

// Peripheral Configuration Code (Do Not Edit)
//---CONFIG_BEGIN---
#pragma GCC push_options
#pragma GCC optimize ("Os")

#include <core.h> // Required by cpu
#include <cpu.h>
#include <bridge.h> // Required by ESP1:MQTT
#include <pubsubclient.h> // Required by ESP1:MQTT
#include <mqtt.h>

#include <SoftwareSerial.h> 

#pragma GCC pop_options

// Peripheral Constructors
CPU &cpu = Cpu;
Mqtt &ESP1_MQTT = Mqtt::instance;

//Second Serial -------------------------------------
#define RX 8
#define TX 9

SoftwareSerial mySerial(RX,TX); //Pines de Transmisión y Recepción

//MQTT Broker -----------------------------------------------------------------------------------
const char* clientID = ""; //Identificador que toma el cliente (nuestro Arduino) Ejemplos: "Arduino", "Sensor" 

const char* mqtt_server = ""; //Ejemplos: "ioticos.org" ,"192.100.25.24", "localhost"
int port  =1883;
const char* mqtt_user = ""; //Usuario
const char* mqtt_pass = ""; //Contraseña

//Topicos
String topic = ""; //Ejemplos: "Casa", "Luz" , "5npIBbWJJYbAfPr"

//Constantes ----------------------------------------------
int Pin_pot = 0;
int pot;

void setup(){
	//MQTT BEGIN
	ESP1_MQTT.begin (clientID, mqtt_server, port, mqtt_user, mqtt_pass);
	ESP1_MQTT.connect(true);

	mySerial.begin(9600);    //Inicializar Monitor Serial 9600 bps
}

void loop(){
	pot = map(analogRead(Pin_pot),0,1024,0,255);
	ESP1_MQTT.publish(topic, false).arg(pot).end();
	mySerial.println("Mensaje Publicado: "+String(pot));
	delay(1000);

}




